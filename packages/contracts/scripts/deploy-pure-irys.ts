import { ethers } from "hardhat";
import * as fs from "fs";
import * as path from "path";

async function main() {
  console.log("\n🚀 Deploying Pure Irys BaaS Contracts...\n");

  const [deployer] = await ethers.getSigners();
  console.log("📝 Deploying with account:", deployer.address);

  const balance = await ethers.provider.getBalance(deployer.address);
  console.log("💰 Account balance:", ethers.formatEther(balance), "ETH\n");

  const deployedContracts: Record<string, string> = {};

  // 1. DocumentRegistry
  console.log("1️⃣  Deploying DocumentRegistry...");
  const DocumentRegistry = await ethers.getContractFactory("DocumentRegistry");
  const registry = await DocumentRegistry.deploy();
  await registry.waitForDeployment();
  const registryAddress = await registry.getAddress();
  deployedContracts.documentRegistry = registryAddress;
  console.log("   ✅ DocumentRegistry deployed to:", registryAddress);

  // 2. AccessControl
  console.log("\n2️⃣  Deploying AccessControl...");
  const AccessControl = await ethers.getContractFactory("AccessControl");
  const access = await AccessControl.deploy();
  await access.waitForDeployment();
  const accessAddress = await access.getAddress();
  deployedContracts.accessControl = accessAddress;
  console.log("   ✅ AccessControl deployed to:", accessAddress);

  // 3. ProvenanceChain
  console.log("\n3️⃣  Deploying ProvenanceChain...");
  const ProvenanceChain = await ethers.getContractFactory("ProvenanceChain");
  const provenance = await ProvenanceChain.deploy();
  await provenance.waitForDeployment();
  const provenanceAddress = await provenance.getAddress();
  deployedContracts.provenanceChain = provenanceAddress;
  console.log("   ✅ ProvenanceChain deployed to:", provenanceAddress);

  // 4. EventBus
  console.log("\n4️⃣  Deploying EventBus...");
  const EventBus = await ethers.getContractFactory("EventBus");
  const events = await EventBus.deploy();
  await events.waitForDeployment();
  const eventsAddress = await events.getAddress();
  deployedContracts.eventBus = eventsAddress;
  console.log("   ✅ EventBus deployed to:", eventsAddress);

  // 5. CacheController
  console.log("\n5️⃣  Deploying CacheController...");
  const CacheController = await ethers.getContractFactory("CacheController");
  const cache = await CacheController.deploy();
  await cache.waitForDeployment();
  const cacheAddress = await cache.getAddress();
  deployedContracts.cacheController = cacheAddress;
  console.log("   ✅ CacheController deployed to:", cacheAddress);

  // 6. SearchIndex
  console.log("\n6️⃣  Deploying SearchIndex...");
  const SearchIndex = await ethers.getContractFactory("SearchIndex");
  const search = await SearchIndex.deploy();
  await search.waitForDeployment();
  const searchAddress = await search.getAddress();
  deployedContracts.searchIndex = searchAddress;
  console.log("   ✅ SearchIndex deployed to:", searchAddress);

  // Get network info
  const network = await ethers.provider.getNetwork();

  // Deployment summary
  const deploymentData = {
    network: {
      name: network.name,
      chainId: Number(network.chainId),
    },
    deployer: deployer.address,
    timestamp: new Date().toISOString(),
    contracts: deployedContracts,
  };

  console.log("\n" + "=".repeat(60));
  console.log("📋 DEPLOYMENT SUMMARY");
  console.log("=".repeat(60));
  console.log(JSON.stringify(deploymentData, null, 2));
  console.log("=".repeat(60) + "\n");

  // Save addresses to file
  const outputDir = path.join(__dirname, "..");
  const outputFile = path.join(outputDir, "deployed-addresses.json");

  fs.writeFileSync(outputFile, JSON.stringify(deploymentData, null, 2));
  console.log("💾 Contract addresses saved to:", outputFile);

  // Create TypeScript config file for frontend
  const tsConfig = `// Auto-generated by deploy-pure-irys.ts
// Do not edit manually

export const PURE_IRYS_CONTRACTS = {
  DOCUMENT_REGISTRY: "${deployedContracts.documentRegistry}",
  ACCESS_CONTROL: "${deployedContracts.accessControl}",
  PROVENANCE_CHAIN: "${deployedContracts.provenanceChain}",
  EVENT_BUS: "${deployedContracts.eventBus}",
  CACHE_CONTROLLER: "${deployedContracts.cacheController}",
  SEARCH_INDEX: "${deployedContracts.searchIndex}",
} as const;

export const NETWORK = {
  NAME: "${network.name}",
  CHAIN_ID: ${Number(network.chainId)},
} as const;

export const DEPLOYED_AT = "${deploymentData.timestamp}";
`;

  const tsConfigFile = path.join(outputDir, "deployed-config.ts");
  fs.writeFileSync(tsConfigFile, tsConfig);
  console.log("📝 TypeScript config saved to:", tsConfigFile);

  console.log("\n✨ Deployment complete! Next steps:");
  console.log("   1. Copy deployed-addresses.json to your frontend");
  console.log("   2. Update environment variables");
  console.log("   3. Test contract interactions\n");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("❌ Deployment failed:", error);
    process.exit(1);
  });
